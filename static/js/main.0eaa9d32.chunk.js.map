{"version":3,"sources":["components/Searchbar/Searchbar.jsx","components/ImageGallery/ImageGalleryItem.jsx","components/ImageGallery/ImageGallery.jsx","components/Button/Button.jsx","components/Modal/Modal.jsx","services/images-api.js","App.js","index.js"],"names":["Searchbar","state","query","handleChange","e","setState","currentTarget","value","handleSubmit","preventDefault","props","onSubmit","className","this","type","onChange","autoComplete","autoFocus","placeholder","Component","ImageGalleryItem","id","webformatURL","alt","largeImageURL","onOpenModal","src","data-source","onClick","ImageGallery","images","map","image","tags","Button","modalRoot","document","querySelector","Modal","handleKeydown","code","onClose","handleOverlayClick","target","window","addEventListener","removeEventListener","createPortal","children","fetchImages","searchQuery","currentPage","axios","get","then","response","data","hits","App","isLoading","error","showModal","largeImgUrl","onChangeQuery","options","prevState","scrollTo","top","documentElement","scrollHeight","behavior","catch","finally","toggleModal","handleModalImg","dataset","source","prevProps","shouldRenderLoadButton","length","color","height","width","timeout","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.0eaa9d32.chunk.js","sourcesContent":["import { Component } from 'react';\r\nimport './Searchbar.scss';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Searchbar extends Component {\r\n  state = {\r\n    query: '',\r\n  };\r\n\r\n  handleChange = e => {\r\n    this.setState({ query: e.currentTarget.value });\r\n  };\r\n\r\n  handleSubmit = e => {\r\n    e.preventDefault();\r\n    this.props.onSubmit(this.state.query);\r\n    this.setState({ query: '' });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <header className=\"Searchbar\">\r\n          <form className=\"SearchForm\" onSubmit={this.handleSubmit}>\r\n            <button type=\"submit\" className=\"SearchForm-button\">\r\n              <span className=\"SearchForm-button-label\">Search</span>\r\n            </button>\r\n\r\n            <input\r\n              className=\"SearchForm-input\"\r\n              type=\"text\"\r\n              value={this.state.query}\r\n              onChange={this.handleChange}\r\n              autoComplete=\"off\"\r\n              autoFocus\r\n              placeholder=\"Search images and photos\"\r\n            />\r\n          </form>\r\n        </header>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Searchbar;\r\n\r\nSearchbar.propTypes = {\r\n  onSubmit: PropTypes.func.isRequired,\r\n};","import './ImageGallery.scss';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst ImageGalleryItem = ({\r\n  id,\r\n  webformatURL,\r\n  alt,\r\n  largeImageURL,\r\n  onOpenModal,\r\n}) => (\r\n  <li key={id} className=\"ImageGalleryItem\">\r\n    <img\r\n      src={webformatURL}\r\n      alt={alt}\r\n      data-source={largeImageURL}\r\n      className=\"ImageGalleryItem-image\"\r\n      onClick={e => onOpenModal(e)}\r\n    />\r\n  </li>\r\n);\r\n\r\nexport default ImageGalleryItem;\r\n\r\nImageGalleryItem.propTypes = {\r\n  id: PropTypes.number,\r\n  webformatURL: PropTypes.string,\r\n  alt: PropTypes.string,\r\n  largeImageURL: PropTypes.string,\r\n  onOpenModal: PropTypes.func,\r\n};\r\n\r\n\r\n\r\n// ImageGallery.propTypes = {\r\n//   images: PropTypes.array.isRequired,\r\n//   onOpenModal: PropTypes.func.isRequired,\r\n// };","import ImageGalleryItem from './ImageGalleryItem';\r\nimport './ImageGallery.scss';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst ImageGallery = ({ images, onOpenModal }) => {\r\n  return (\r\n    <ul className=\"ImageGallery\">\r\n      {images.map(image => (\r\n        <ImageGalleryItem\r\n          id={image.id}\r\n          key={image.id}\r\n          webformatURL={image.webformatURL}\r\n          alt={image.tags}\r\n          largeImageURL={image.largeImageURL}\r\n          onOpenModal={onOpenModal}\r\n        />\r\n      ))}\r\n    </ul>\r\n  );\r\n};\r\n\r\nexport default ImageGallery;\r\n\r\nImageGallery.propTypes = {\r\n  images: PropTypes.array.isRequired,\r\n  onOpenModal: PropTypes.func.isRequired,\r\n};","import './Button.scss'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst Button =({onClick}) => {\r\n    return (\r\n      <div>\r\n        <button type=\"button\" className=\"Button\" onClick={() => onClick()}>\r\n          Load more\r\n        </button>\r\n      </div>\r\n    );\r\n}\r\n\r\nexport default Button\r\n\r\nButton.propTypes = {\r\n  onClick:PropTypes.func.isRequired\r\n};","import { Component } from 'react';\r\nimport { createPortal } from 'react-dom';\r\nimport './Modal.scss';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst modalRoot = document.querySelector('#modal-root');\r\n\r\nclass Modal extends Component {\r\n  componentDidMount() {\r\n    window.addEventListener('keydown', this.handleKeydown);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    window.removeEventListener('keydown', this.handleKeydown);\r\n  }\r\n\r\n  handleKeydown = e => {\r\n    if (e.code === 'Escape') {\r\n      this.props.onClose();\r\n    }\r\n  };\r\n\r\n  handleOverlayClick = e => {\r\n    if (e.currentTarget === e.target) {\r\n      this.props.onClose();\r\n    }\r\n\r\n    // console.log(e.currentTarget); //на чём словили\r\n    // console.log(e.target); //на что клацнули\r\n  };\r\n\r\n  render() {\r\n    return createPortal(\r\n      <div className=\"Overlay\" onClick={this.handleOverlayClick}>\r\n        <div className=\"Modal\">{this.props.children}</div>\r\n      </div>,\r\n      modalRoot,\r\n    );\r\n  }\r\n}\r\nexport default Modal;\r\n\r\n\r\nModal.propTypes = {\r\n  onClick: PropTypes.func.isRequired,\r\n};","import axios from 'axios';\r\n\r\n// axios.defaults.headers.common['Authorization'] = 'Bearer 20667808-d6e3a4866a107921c5b89b931';\r\n\r\nconst BASE_URL = 'https://pixabay.com/api/';\r\nconst API_KEY = '20667808-d6e3a4866a107921c5b89b931';\r\nconst IMG_TYPE = 'photo';\r\nconst ORIENTATION = 'horizontal';\r\n\r\nconst fetchImages = ({ searchQuery = '', currentPage = 1 }) => {\r\n  return axios\r\n    .get(\r\n      `${BASE_URL}?q=${searchQuery}&page=${currentPage}\r\n    &key=${API_KEY}&image_type=${IMG_TYPE}&orientation=${ORIENTATION}&per_page=12`,\r\n    )\r\n   \r\n    .then(response => response.data.hits);\r\n};\r\n\r\nexport default  fetchImages ;\r\n","import { Component } from 'react';\nimport Searchbar from './components/Searchbar/Searchbar';\nimport ImageGallery from './components/ImageGallery/ImageGallery';\nimport Button from './components/Button/Button';\nimport Modal from './components/Modal/Modal';\nimport Loader from 'react-loader-spinner';\n// import Spinner from './components/Loader/Loader'\nimport fetchImages from './services/images-api';\nimport 'react-loader-spinner/dist/loader/css/react-spinner-loader.css';\n\nclass App extends Component {\n  state = {\n    images: [],\n    currentPage: 1,\n    searchQuery: '',\n    isLoading: false,\n    error: null,\n    showModal: false,\n    largeImgUrl: '',\n  };\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.searchQuery !== this.state.searchQuery) {\n      this.fetchImages();\n    }\n  }\n\n  onChangeQuery = query => {\n    this.setState({\n      searchQuery: query,\n      currentPage: 1,\n      images: [],\n      error: null,\n    });\n  };\n\n  fetchImages = () => {\n    const { currentPage, searchQuery } = this.state;\n    const options = { currentPage, searchQuery };\n\n    this.setState({ isLoading: true });\n    fetchImages(options)\n      .then(hits => {\n        this.setState(prevState => ({\n          images: [...prevState.images, ...hits],\n          currentPage: prevState.currentPage + 1,\n        }));\n        window.scrollTo({\n          top: document.documentElement.scrollHeight,\n          behavior: 'smooth',\n        });\n      })\n      .catch(error => this.setState({ error }))\n      .finally(() => this.setState({ isLoading: false }));\n  };\n\n  toggleModal = e => {\n    this.setState(({ showModal }) => ({ showModal: !showModal }));\n    if (this.state.showModal) {\n      this.setState({ largeImgUrl: '' });\n    }\n\n    // console.log(e.target);\n  };\n\n  handleModalImg = e => {\n    this.setState({ largeImgUrl: e.target.dataset.source });\n    this.toggleModal();\n  };\n\n  render() {\n    const { images, isLoading, error, showModal, largeImgUrl } = this.state;\n    const shouldRenderLoadButton = images.length > 0 && !isLoading;\n\n    return (\n      <div>\n        {showModal && (\n          <Modal onClose={this.toggleModal}>\n            <img src={largeImgUrl} alt=\"\" />\n          </Modal>\n        )}\n        <Searchbar onSubmit={this.onChangeQuery} />\n        {error && (\n          <h1 className=\"Error\">Something went wrong. Please try again.</h1>\n        )}\n        <ImageGallery images={images} onOpenModal={this.handleModalImg} />\n        {isLoading && (\n          <Loader\n            className=\"Loader\"\n            type=\"ThreeDots\"\n            color=\"#3f51b5\"\n            height={50}\n            width={50}\n            timeout={3000}\n          />\n        )}\n        {shouldRenderLoadButton && <Button onClick={this.fetchImages} />}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './styles.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}